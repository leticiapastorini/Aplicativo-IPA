import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class SAPInventarioReader {

    private static final String AES_KEY = "0123456789abcdef"; // Deve ser a mesma chave do app Android

    public static void main(String[] args) {
        try {
            // Caminho do arquivo (Ajuste conforme necess√°rio)
            File arquivoSAP = new File("C:/InventarioPeruzzoAndroid/.pasta_protegida/inventario_sap.txt");

            if (!arquivoSAP.exists()) {
                System.err.println("Arquivo SAP n√£o encontrado!");
                return;
            }

            // L√™ o conte√∫do criptografado do arquivo
            BufferedReader br = new BufferedReader(new FileReader(arquivoSAP));
            String linha;
            System.out.println("üìú Dados Descriptografados:");

            while ((linha = br.readLine()) != null) {
                // Descriptografar cada linha
                String linhaDescriptografada = decrypt(linha, AES_KEY);
                System.out.println(linhaDescriptografada);
            }
            br.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String decrypt(String encryptedData, String key) throws Exception {
        SecretKeySpec aesKey = new SecretKeySpec(key.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, aesKey);
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedData);
        return new String(cipher.doFinal(decodedBytes), StandardCharsets.UTF_8);
    }
}
Para que o SAP consiga ler e descriptografar o arquivo inventario_sap.txt, ele precisar√° seguir um processo de descriptografia AES usando a mesma chave que foi usada na criptografia (AES_KEY = "0123456789abcdef").

üõ† Como o SAP pode descriptografar o arquivo?
O processo do lado do SAP deve incluir os seguintes passos:

Ler o conte√∫do do arquivo inventario_sap.txt.
Aplicar a descriptografia AES usando a mesma chave fixa.
Interpretar o conte√∫do e processar os dados.
üìù O que esse c√≥digo faz?
‚úÖ Abre o arquivo inventario_sap.txt no SAP.
‚úÖ L√™ cada linha criptografada.
‚úÖ Aplica a descriptografia AES com a mesma chave do app.
‚úÖ Imprime os dados leg√≠veis para o SAP processar.

üõ† Adapta√ß√µes necess√°rias no SAP
Se o SAP n√£o suportar Java, ent√£o:

Se estiver em Python, pode usar pycryptodome para descriptografar.
Se for em ABAP, precisar√° de um m√≥dulo para AES.
Se for em outro sistema, podemos adaptar para a linguagem correta.
üìå Pr√≥ximos Passos
üîπ Valida se o SAP pode rodar esse c√≥digo Java.
üîπ Testa um arquivo de exemplo gerado pelo Android.
üîπ Caso precise de outra linguagem, adaptamos o c√≥digo! üöÄ






import java.io.*;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class LerInventarioSAP {

    private static final String AES_KEY = "0123456789abcdef"; // Mesma chave usada no Android

    public static void main(String[] args) {
        try {
            // Caminho do arquivo (ajuste para o diret√≥rio correto no SAP)
            File arquivoSAP = new File("C:/InventarioPeruzzoAndroid/.pasta_protegida/inventario_sap.txt");

            if (!arquivoSAP.exists()) {
                System.out.println("Arquivo SAP n√£o encontrado.");
                return;
            }

            BufferedReader br = new BufferedReader(new FileReader(arquivoSAP));
            String line;

            System.out.println("Conte√∫do do invent√°rio (Descriptografado):");
            while ((line = br.readLine()) != null) {
                // Descriptografar cada linha
                String linhaDescriptografada = decrypt(line, AES_KEY);
                System.out.println(linhaDescriptografada);
            }
            br.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String decrypt(String encryptedData, String key) throws Exception {
        Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, aesKey);
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedData);
        return new String(cipher.doFinal(decodedBytes), StandardCharsets.UTF_8);
    }
}
